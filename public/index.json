[{"content":"The Role of FPGAs in Modern Embedded Systems #Introduction #Field-Programmable Gate Arrays (FPGAs) have become indispensable in the world of modern embedded systems. Their ability to combine hardware-level performance with software-like flexibility makes them a powerful tool across industries, from telecommunications to medical devices and autonomous vehicles. But what exactly makes FPGAs so special, and how are they shaping the future of embedded design?\nWhat are FPGAs? #FPGAs are integrated circuits that can be configured by the end-user after manufacturing. Unlike traditional ASICs (Application-Specific Integrated Circuits), which are hardwired for specific tasks, FPGAs allow designers to reprogram the hardware as needed. This reprogrammability opens the door to rapid prototyping, iterative design, and even real-time updates in deployed systems.\nWhy Use FPGAs in Embedded Systems? #1. Performance #FPGAs provide unparalleled performance by allowing custom hardware acceleration for specific tasks. For example, an FPGA can process data streams in parallel, achieving throughput levels that general-purpose CPUs and GPUs often cannot match.\n2. Flexibility #Their reconfigurable nature means FPGAs can adapt to evolving standards or requirements. In embedded systems, where protocols and use cases can change, this adaptability is crucial.\n3. Low Latency #Unlike processors that rely on software loops, FPGAs execute tasks directly in hardware, resulting in minimal latency. This is critical in applications like real-time signal processing or high-frequency trading.\n4. Cost Efficiency in Low-Volume Production #For applications requiring small to medium-scale production, FPGAs can save costs compared to designing and fabricating custom ASICs.\nApplications of FPGAs in Embedded Systems #1. Telecommunications #FPGAs are the backbone of modern telecommunications infrastructure. They power base stations, data encryption, and high-speed networking solutions, providing the speed and reliability needed for 5G networks.\n2. Medical Devices #From real-time imaging in ultrasound machines to control systems in surgical robots, FPGAs ensure precision and reliability in life-critical systems.\n3. Automotive Systems #In advanced driver-assistance systems (ADAS) and autonomous vehicles, FPGAs handle sensor fusion, real-time decision-making, and communication between components.\n4. IoT and Edge Computing #FPGAs enable efficient processing in IoT devices and edge computing nodes, ensuring low-power, high-performance operation at the edge.\nChallenges in FPGA Design #1. Learning Curve #Programming FPGAs requires knowledge of hardware description languages like VHDL or Verilog, as well as familiarity with the design and verification toolchain.\n2. Power Consumption #While FPGAs are more flexible, they often consume more power than ASICs for the same task. This makes careful optimization crucial.\n3. Cost for High-Volume Production #For applications requiring millions of units, the per-unit cost of an FPGA might outweigh its benefits compared to an ASIC.\nTools for FPGA Development #Popular FPGA vendors such as Xilinx (now AMD) and Intel offer robust development ecosystems:\nXilinx Vivado: For design and implementation. Intel Quartus: Comprehensive toolchain for FPGA development. ModelSim/Xcelium: For simulation and verification. High-Level Synthesis (HLS): Enables designers to use C-based languages to develop FPGA designs. The Future of FPGAs in Embedded Systems #The growing demand for real-time processing, artificial intelligence, and high-speed data communication is driving the adoption of FPGAs in embedded systems. With advancements like Adaptive Compute Acceleration Platforms (ACAPs) and System-on-Chip (SoC) integrations, FPGAs are becoming more powerful, user-friendly, and accessible.\nConclusion #FPGAs bridge the gap between the performance of hardware and the flexibility of software, making them a cornerstone of modern embedded systems. As industries continue to demand faster, smarter, and more efficient systems, the role of FPGAs will only grow. Whether you’re a designer, a hobbyist, or a tech enthusiast, now is the perfect time to explore the potential of these fascinating devices.\nWhat are your thoughts on the role of FPGAs in embedded systems? Let’s discuss in the comments!\n","date":"21 November 2024","permalink":"/blog/role_of_fpga/","section":"Blog","summary":"My point of view about the usage of FPGA in the modern embedded system","title":"FPGA in Modern Embedded System"},{"content":"","date":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"Milan Polytechnic - Milan - Italy # Master’s Degree (Unfinished) — 2018 - Now\nWas enrolled in a Master\u0026rsquo;s degree of electronics engineering in Politecnico di Milano. Currently on hold due to personal events.\nUniversity of Calabria - Arcavacata - Italy # Bachelor Degree — 2014 - 2017\nHolding a Bachelor Degree in Electronics Engineering with an experimental Thesis entitled “Reconfigurable Parallel Convolver Architecture for Deep Convolutional Neural Network”. Work related to the Thesis is released as open source and can be found here\nIstituto Salesiano Don Bosco – Cairo - Egypt # Technician Diploma — 2009 - 2013\nIn Electrical systems and Automation with a focus on industrial applications and a Thesis on an Open Source implementation for a PLC with extended I/O functionalities.\n","date":"31 October 2024","permalink":"/education/","section":"Index","summary":"","title":"Education"},{"content":"Professional Experiences #Digital Design Engineer (Freelancer)\nGPixel NV., Antwerp, Belgium — SEP 2021 - OCT 2024 Achievements Designed digital architecture for CMOS sensors, including RTL implementation and backend netlist generation. Verified RTL code for team members, ensuring accurate functionality. Developed IP blocks for data streaming interfaces (MIPI, SLVS-EC). Designed flexible register maps and data acquisition stages from ADCs. Architected data pipelines for pixel filtering and streaming. Conducted physical routing and layout using Cadence tools. FPGA Engineer\nHiFuture SRL, Cologno Monzese, Milan — DEC 2018 - SEP 2021 Achievements Supported clients in implementing applications across various FPGA technologies, balancing technical needs, effort, and budget. Identified critical paths for projects in terms of effort, budget, and feasibility. Designed, architected, and fully verified a hardware accelerator for YOLO V3 on Ultra96 for embedded targets. Developed, architected, and verified a smart camera with high-speed interface and preprocessing on Zynq 7030 FPGA. Designed, architected, and verified distributed control systems for high-power inverters, including optical fiber encoding and security features. Architected, designed, and fully verified multi-clock systems for particle accelerator control. Developed and verified a novel acquisition and processing system for 3D imaging via HDMI. Designed ARINC 429 flight controller subsystems for civil aircraft. Technical Leader \u0026amp; FPGA Designer\nCheckout Technologies SRL (Startup), Milan — SEP 2017 - NOV 2018 Achievements Led the electronics team, coordinating with the CTO to manage development timelines and updates. Defined technical requirements, ensuring documentation and prototypes met original specifications. Provided solutions for technical challenges, balancing development time and cost. Selected optimal components for projects, focusing on price-to-performance ratio. Designed, architected, and verified hardware accelerators for Convolutional Neural Networks (C.N.N.) with processing system interfaces and Linux drivers Optimize the deployment of Deep Learning models on various CPU architectures, using hardware-specific features. Designed multiple MCU-based systems, both on firmware and PCB design. Successfully porting low level API from C to Python for an industrial camera. Electronics Designer\nSmartlab SRL, Rende, Cosenza — NOV 2016 - MAR 2017 Achievements Designed and verified a range of consumer devices, implementing a proprietary communication protocol tailored to project specifications. Developed and tested PCBs, ensuring reliable functionality across multiple devices. Built a C++ library to modularize and abstract project layers, enhancing code reuse and simplifying future development. Architected and implemented a custom communication protocol using RESTful APIs, enabling seamless integration with Android and iOS applications for remote device control and data exchange. ","date":"31 October 2024","permalink":"/experiences/","section":"Index","summary":"","title":"Experiences"},{"content":"I am a passionate Electronics Engineer with 7 years of experience in the market. My main area of experience is in Digital IC Design, but my experience touches on every aspect of electronics design from PCB design, firmware development, and IoT integration. My journey began shortly after high school where i interned technician in power plants, in line with my Diploma in Eletrical control and Automation. After obtaining my university degree in Electronics i moved toward designing Electronics Circuit on various levels. Currently, I’m a freelancer electronics designer where I help my clients to develop cutting-edge technologies, transforming high-level concepts into precise implementations. As a dedicated Linux user for 14 years and an advocate for open-source initiatives, I thrive on community-driven innovation. I also volunteer at Hacklab Cosenza, collaborating with fellow tech enthusiasts. Guided by my favorite quote,\nWork to become, not to acquire\n(Elbert Hubbard)\nI am committed to using technology to enhance lives and inspire others every day.\n","date":null,"permalink":"/","section":"Index","summary":"","title":"Index"},{"content":"Core Skills # Support Skills #Electronics # Programming # Soft Skills #Personal # Languages # ","date":null,"permalink":"/skills/","section":"Index","summary":"","title":"Skills"},{"content":"CMOS Imaging Sensor for Photography #Overview #This project focused on the development of a high-frame-rate CMOS imaging sensor capable of up to 8K resolution, targeting the professional photography market. The work involved designing the sensor\u0026rsquo;s architecture and implementing its high-speed interfaces: SLVS-EC and MIPI. Contributions spanned the entire design cycle, from architecture definition and RTL implementation to verification and backend integration.\nKey Features and Achievements # Sensor Architecture: Collaborated on crafting the overall architecture for the 8K CMOS sensor, optimizing for high resolution and frame rate. Interface Design: Designed and implemented the SLVS-EC and MIPI interfaces for high-speed data transfer. Design Implementation: Developed and verified RTL using VHDL for all digital components. Assisted in defining and applying detailed timing constraints to achieve successful timing closure. Supported backend synthesis to ensure the design met performance and area requirements. Verification: Contributed to the verification process, ensuring robust and error-free operation. Wrote various UVM testbenches and reusable blocks Toolchain Utilization: Used the Cadence toolchain (Genus, Xcelium, Innovus, and Tempus) for synthesis, simulation, backend, and timing analysis. Technical Details # High-Performance Interfaces: Implemented SLVS-EC for efficient, low-power, and scalable data transmission. Integrated MIPI for compatibility with mobile and photography industry standards. RTL Development: Focused on modular and efficient design for the sensor\u0026rsquo;s digital blocks, targeting low latency and high throughput. Backend and Timing: Ensured synthesis and timing closure through rigorous iterations using Cadence tools. Developed timing constraints to guide placement and routing for optimal performance. Verification Efforts: Supported the development of a comprehensive testbench to validate the sensor\u0026rsquo;s functionality and performance. Challenges and Solutions # High-Speed Data Transmission: Overcame challenges in designing high-speed interfaces by optimizing the implementation of SLVS-EC and MIPI standards. Timing Closure: Addressed timing challenges through careful constraint definition and iterative backend runs. System Integration: Balanced architectural design with implementation needs to ensure smooth integration of all components while meeting strict performance targets. Outcome #The project successfully delivered a high-frame-rate, 8K CMOS imaging sensor tailored for the professional photography market. With robust high-speed interfaces and efficient architecture, the sensor achieved exceptional performance, meeting stringent industry standards. Contributions across the design cycle, from RTL to backend, ensured a reliable and high-quality outcome.\n","date":null,"permalink":"/portfolio/photography_sensor/","section":"Portfolio","summary":"Digital blocks for a high performance CMOS sensor targeting the Photography market","title":"Photography CMOS image Sensor"},{"content":"","date":null,"permalink":"/portfolio/","section":"Portfolio","summary":"","title":"Portfolio"},{"content":"CMOS Sensor for Endoscopy Applications #Overview #This project involved developing the digital blocks of a CMOS sensor designed for endoscopic applications. The pipeline included pixels acquisition from ADCs, data path processing with minor filtering, and streaming the processed data to an analog output interface. The project also required designing key control blocks, such as the sequencer and timing generator, for proper integration with analog components.\nKey Features and Achievements # Pipeline Development: Designed the digital pipeline for data acquisition from ADCs, including a data path with minor filtering and streaming to an analog output interface. Control and Sequencing: Developed the sequencer and timing generator required to synchronize and control the sensor\u0026rsquo;s analog blocks. Register Interface Management: Implemented the register interface for configuration and control. Distributed registers and clocks to ensure efficient operation of digital blocks located in various parts of the ASIC. RTL Development and Verification: Designed all digital components in VHDL, focusing on functionality, efficiency, and modularity. Physical Design Support: Wrote detailed timing constraints to guide synthesis and ensure timing closure. Performed partial backend runs using Cadence tools to verify synthesis and resolve timing issues. Technical Details # Pipeline Features: Data acquisition from ADCs, incorporating essential data path filtering for noise reduction. Analog output streaming for seamless integration with external analog interfaces. Control Logic: Developed a sequencer to orchestrate the operation of digital and analog blocks. Created a timing generator to provide precise timing signals for the system\u0026rsquo;s analog components. Clock and Register Management: Designed the distribution of clock signals and registers across the chip, optimizing for performance and power. Implementation Details: RTL coding in VHDL for all digital blocks. Developed and applied timing constraints to achieve timing closure. Conducted backend synthesis and verification using Cadence Genus for synthesis, Cadence Xcelium for simulation, Cadence Innovus for physical design, and Cadence Tempus for timing analysis. Challenges and Solutions # Timing Closure: Addressed timing challenges by iterating on synthesis runs and refining timing constraints using Tempus to meet strict performance requirements. Clock Distribution: Ensured robust clock signal distribution across the ASIC to maintain synchronization of digital blocks. Integration with Analog Components: Designed a sequencer and timing generator to precisely control analog functions, ensuring seamless operation of the mixed-signal system. Tool Utilization: Leveraged the Cadence toolchain for comprehensive design, verification, and timing closure workflows. Outcome #The project successfully delivered all required digital blocks for the CMOS sensor, enabling reliable and precise operation in endoscopic applications. By ensuring robust timing closure, efficient clock distribution, and seamless integration with analog components, the design met stringent medical application requirements. The RTL implementation in VHDL, supported by rigorous backend synthesis and physical verification through Cadence tools, resulted in a high-performance and reliable ASIC.\n","date":null,"permalink":"/portfolio/endoscopy_sensor/","section":"Portfolio","summary":"Digital blocks for a CMOS image sensor targeting endoscopy application","title":"Endoscopy CMOS image Sensor"},{"content":"Industrial Camera for Product Inspection #Overview #This project involved designing an industrial camera system for product inspection, utilizing a dual-sensor setup for enhanced optical zoom capabilities. The system was built around a Xilinx FPGA and featured advanced image processing, enabling high-performance frame acquisition and manipulation.\nKey Features and Achievements # Dual-Sensor Setup: Integrated two identical Sony sensors with different lenses to achieve optical zoom functionality. Advanced Image Processing Pipeline: Frame acquisition from the Sony sensor. Debayering, white balance adjustment, and vignette removal. Image zooming and cropping for customized output. High-Speed Sensor Interface: Operated at the maximum bus speed of the device\u0026rsquo;s speed grade. Implemented dynamic phase alignment (DPA) to ensure reliable communication. AXI-Based Architecture: Utilized an AXI bus for video data handling, ensuring compatibility and efficient integration of pre-existing Xilinx IPs. Memory Management: Processed images were stored in memory for efficient access by a Zynq processor. High-Speed Transmission: Images were further processed on Zynq and transmitted over Ethernet for real-time analysis. Technical Details # Hardware: Xilinx FPGA, Sony sensors, Zynq processing unit. Development: Designed and implemented the FPGA architecture in VHDL. Verified using SystemVerilog testbenches. Integrated pre-existing Xilinx IP cores into the design. Technologies Used: Xilinx Vivado for synthesis and implementation. Verilog/SystemVerilog for verification. AXI bus for internal video data routing. Image Pipeline: Acquired and corrected images stored in memory before being accessed by Zynq for further processing. Challenges and Solutions # High-Speed Communication: Overcame bus speed limitations by implementing dynamic phase alignment (DPA) to maintain reliable sensor communication at maximum speed. AXI Integration: Successfully adapted the design to incorporate pre-existing Xilinx IP cores, leveraging the AXI protocol for efficient video data handling. Synchronization: Managed synchronization between two sensors for seamless optical zoom integration. Processing Efficiency: Optimized FPGA resources to handle the entire image processing pipeline without bottlenecks. Outcome #The camera system delivered exceptional performance in industrial product inspection, leveraging dual-sensor optical zoom and real-time Ethernet transmission. Its robust image processing pipeline, AXI-based architecture, and high-speed communication met demanding industrial requirements.\n","date":null,"permalink":"/portfolio/industrial_camera/","section":"Portfolio","summary":"Dual sensor industrial camera used in product inspection for quality control","title":"Industrial Camera"},{"content":"Temperature Sensor PCB Design #Overview #This project involved designing a PCB for temperature measurement using PT1000 sensors. The system features 16 channels for temperature data acquisition, signal conditioning, and filtering before interfacing with an Analog-to-Digital Converter (ADC). The PCB also includes an ST microcontroller for managing the system, analog multiplexers controlled by the MCU, and a CAN-to-USB adapter for PC communication. The design ensured high accuracy in temperature measurement and reliable data transmission.\nKey Features and Achievements # Temperature Sensor Interface: Designed the interface for 16 PT1000 temperature sensors, capturing data and performing necessary signal filtering to ensure accurate readings. Used analog multiplexers controlled by the microcontroller to handle multiple sensor channels efficiently. Microcontroller Integration: Integrated an ST microcontroller to control the analog muxes, manage data acquisition, and process sensor information. Designed the circuitry necessary for programming and debugging the microcontroller. Signal Conditioning and ADC: Developed analog circuitry for signal filtering to optimize sensor data before feeding it to the ADC. Implemented proper analog reference generation to ensure stable and accurate ADC performance. CAN-to-USB Communication: Incorporated a CAN-to-USB adapter for seamless data transmission from the system to a PC for monitoring and analysis. Power Supply Design: Designed a multi-voltage power supply to ensure stable power delivery to the microcontroller, sensors, and other components. Technical Details # Hardware Specifications: Temperature Sensors: 16-channel PT1000 temperature sensors for precise temperature measurements. Signal Conditioning: Analog filters to remove noise and prepare sensor data for ADC conversion. Microcontroller: ST microcontroller used to control the analog muxes and manage data processing. ADC: High-precision ADC for digitizing the analog signals from the sensors. CAN-to-USB Adapter: Used for PC interface, enabling the system to send data over CAN bus via USB. Design Tools: Cadence OrCAD for schematic design and layout guidance. Worked closely with the external PCB layout team to ensure signal integrity and proper component placement. Power Supply Design: Designed a multi-voltage power supply to handle different voltage requirements for the microcontroller, sensors, and peripherals. Created a stable analog reference for the ADC to minimize measurement errors. Challenges and Solutions # Signal Integrity: Ensured clean signal acquisition through analog filtering and careful layout to avoid noise interference. Channel Multiplexing: Used analog multiplexers controlled by the MCU to handle multiple PT1000 sensors efficiently, ensuring correct signal routing. Power Management: Designed a reliable multi-voltage power supply to meet the needs of the microcontroller and sensors. Communication Interface: Incorporated a CAN-to-USB adapter to ensure smooth communication with a PC for monitoring and data logging. Programming and Debugging: Designed dedicated circuitry for microcontroller programming and debugging to streamline development and testing. Outcome #The PCB successfully integrated all components for high-precision temperature measurement and efficient data transmission. The design ensured accurate sensor readings, stable power delivery, and reliable communication with the PC via CAN bus. By incorporating proper signal conditioning, ADC reference generation, and robust power management, the system met all performance requirements.\n","date":null,"permalink":"/portfolio/industerial_temperature_board/","section":"Portfolio","summary":"Temperature board that allows for monitor and filtering of 16 temperature sensors with USB interface towards PC","title":"Industrial Temperature Board"},{"content":"Multi-Phase Inverter #Overview #This project involved developing a distributed control system for a multi-phase inverter used in metal foundries. The system was designed using two main FPGAs (one master and one slave) utilizing Intel (Altera) technology. The master controlled multiple slaves simultaneously through point-to-point optical links and interfaced with a PC that manages high-level parameters and overall operation.\nKey Features and Achievements # Distributed Control: The system consists of a master FPGA and multiple slave FPGAs working in parallel. Point-to-Point Optical Links: The master manages communication with the slaves using point-to-point optical links. Communication Protocol: Developed a communication protocol between the master and slaves over optical links with embedded clock. The protocol uses a periodic transmission scheme with an auto-recovery feature. Real-Time Data Channel: Created a special channel on the optical link for real-time data flowing from the slaves to the PC. PWM Signal Control: Developed the control for PWM signals, including algorithms for frequency and duty cycle management. Sensor Monitoring: Implemented continuous sensor monitoring to ensure safe operation and fault detection. Comprehensive Documentation: Produced detailed study and architecture documents that provided in-depth insights into the system design, protocols, and hardware specifications. Comprehensive technical documentation was created for the development and integration of VHDL code, communication protocols, and control logic. Technical Details # Hardware: Intel (Altera) FPGA, current and temperature sensors, control PC. Development: Designed and implemented the communication protocol between master and slaves in VHDL. Developed the PWM control logic and sensor reading systems in VHDL to ensure accurate, real-time control of the inverter system. Managed communication via point-to-point optical links to ensure low latency and high reliability. Created a dedicated real-time data channel to transmit critical data between the slaves and the control PC. Technologies Used: Intel (Altera) FPGA for control and communication management. VHDL for the development of control logic, communication protocols, and sensor integration. Sensor technologies for current and temperature monitoring. PWM Control: Advanced algorithms for controlling PWM frequencies, ensuring safe operation and fault detection. Challenges and Solutions # Communication Reliability: Optimized the optical point-to-point transmission to ensure reliable communication in harsh industrial environments. Synchronization: Managed synchronization between the master and slaves to control multiple inverters simultaneously. Error Recovery: Implemented an auto-recovery mechanism for communication between the master and slaves in case of packet loss or link failure. Outcome #The system delivered precise and safe control of multi-phase inverters, ensuring optimal operation in metal foundries. With optical communication and an advanced protocol developed entirely in VHDL, the system maintained high operational reliability even in demanding conditions, with continuous monitoring and fault detection. Additionally, all relevant study architecture and detailed documentation were produced, providing clear and comprehensive insights into the system design and operation.\n","date":null,"permalink":"/portfolio/multiphase_inverter/","section":"Portfolio","summary":"Multi-phase inverter distributed control system for metal foundries application","title":"Multi-Phase Inverter"},{"content":"Optical Link Interface PCB Design #Overview #This project involved designing a purely analog PCB to interface two optical links running the same digital protocol but operating at different wavelengths. The adapter converted signals between an 820 nm Avago HCS fiber link and a modern 1310 nm SFP link. By maintaining an analog approach, the design ensured the lowest possible latency while enabling seamless bidirectional communication.\nKey Features and Achievements # Analog Signal Conversion: Adapted PECL output from the Avago HCS fiber link to the LVDS input of the SFP module. Designed a fully analog, bidirectional interface to minimize latency for both upstream and downstream data flow. Schematic Design: Developed precise analog schematics using Cadence OrCAD. Provided layout guidance for critical design elements, ensuring signal integrity and power efficiency. Manufacturing Coordination: Collaborated with the PCB manufacturing facility to ensure proper delivery of all components and design specifications. Verified manufacturing accuracy for controlled impedance and signal isolation. Power Management: Integrated a low-noise, efficient power supply to support the optical modules and analog circuitry. Design Considerations: Focused on analog components and techniques to achieve low-latency signal adaptation. Implemented controlled impedance traces and isolation for high-speed signaling. Technical Details # Hardware Specifications: Input Link: 820 nm Avago HCS fiber with PECL signaling. Output Link: 1310 nm SFP module with LVDS signaling. Fully analog, bidirectional data flow for upstream and downstream communication. Design Tools: Cadence OrCAD for schematic design. Layout performed externally with guidance on critical analog design aspects. PCB Design Features: Controlled impedance traces to ensure high-speed signal integrity. Signal isolation techniques to minimize crosstalk and noise. Low-latency analog signal path to meet stringent timing requirements. Manufacturing: Collaborated with the PCB factory to ensure accurate production. Delivered comprehensive manufacturing files and verified production processes. Challenges and Solutions # Latency Reduction: Chose a purely analog design approach to eliminate delays associated with digital processing. Signal Integrity: Maintained robust signal integrity through controlled impedance and optimized layout for high-speed communication. Precision Manufacturing: Ensured accurate PCB fabrication by working closely with the manufacturer, particularly for analog circuit specifications. Compatibility: Bridged the gap between legacy Avago HCS fiber systems and modern SFP technology through analog signal adaptation. Outcome #The analog PCB design provided a high-performance interface between two optical link technologies, achieving the lowest possible latency while ensuring reliable bidirectional communication. The project successfully balanced legacy and modern technologies with precision analog design, robust signal adaptation, and efficient power management, meeting all functional and performance requirements.\n","date":null,"permalink":"/portfolio/optical_link_power_adaptor/","section":"Portfolio","summary":"Purely analog PCB to adapt the optical links between two different wavelength standards","title":"Optical Link Wavelength Adaptor"},{"content":"Control System for Particle Accelerator Used in Cancer Treatment #Overview #This project focused on upgrading the control system of an existing particle accelerator used in cancer treatment. The core development involved creating a new communication protocol to efficiently distribute data over optical links connected to a master. The system also allowed a National Instruments (NI) device on a backplane to retrieve data collected from the slaves via the master using PCI.\nKey Features and Achievements # Advanced Communication Protocol: Designed and implemented a new protocol for distributing data between the master and multiple slaves via optical links. Enabled data retrieval by a National Instruments device connected through PCI on the backplane. Protocol Features: Added special fields for specific event handling. Integrated a priority-based system for handling critical data transmission. Embedded clock signal within the data stream to simplify synchronization. Utilized 8b/10b encoding for reliable data transmission and error correction codes for enhanced fault tolerance. Synchronization: Developed a synchronization mechanism between the master and slaves using a digital controlled oscillator (DCO) and a second-order phase-locked loop (PLL) on the master FPGA. System Design Enhancements: Supported the distribution and collection of real-time data required for the precise control of the particle accelerator. Optimized performance and reliability for use in a medical application, where accuracy and safety are paramount. Technical Details # Hardware: Xilinx FPGAs for the master and slave devices. Optical links for communication between the master and slave devices. National Instruments device on the backplane for data retrieval via PCI. Protocol Development: Embedded clocking mechanism to ensure synchronization over the optical links. Implemented 8b/10b encoding to improve signal integrity. Incorporated error correction code (ECC) to detect and correct transmission errors. Developed custom fields for handling special events and a priority system for critical data. Synchronization Mechanism: Control of a digital controlled oscillator (DCO) on the master FPGA board for synchronization. Achieved precise clock alignment using a second-order PLL, ensuring smooth operation and communication reliability. Technologies Used: VHDL for designing the protocol logic and data handling systems. PCI bus for interfacing the master with the National Instruments device. Challenges and Solutions # Data Synchronization: Used a digital controlled oscillator with a second-order PLL on the master FPGA board to maintain precise timing with the slaves. Error Resilience: Used 8b/10b encoding and ECC to enhance data reliability and clock recovery. Priority Handling: Designed a priority-based system to manage the transmission of critical data efficiently without delays. Real-Time Data Retrieval: Integrated PCI communication for fast and reliable data access by the National Instruments device. Outcome #The new communication protocol enhanced the control system of the particle accelerator, enabling precise and reliable operation crucial for cancer treatment applications. By incorporating advanced features like embedded clocking, error correction, and priority handling, as well as synchronization via a digital controlled oscillator and second-order PLL, the system achieved high reliability and performance, meeting stringent medical standards.\n","date":null,"permalink":"/portfolio/particle_accelerator/","section":"Portfolio","summary":"Control System for Particle Accelerator Used in Cancer Treatment","title":"Particle accelerator"},{"content":"From Backend Development to ASIC: My Journey Through Passion and Curiosity\nIntroduction #I’ve always believed that passion and curiosity are powerful drivers for personal growth. My journey into the world of electronics started much earlier than most—in middle school, when I was tinkering with backend development, fascinated by how systems worked behind the scenes. Over time, my growing curiosity led me deeper into technology, eventually guiding me to firmware design and, later, into the intricate domain of ASIC (Application-Specific Integrated Circuit) design. This progression was fueled by a love for learning, a formal education in electronics engineering, and a significant influence from open-source communities. In this article, I’ll share my story, insights, and tips for anyone looking to follow a similar path or simply understand the connections between these disciplines.\nFrom Backend Systems to ASIC Design: Key Contrasts #1. The Nature of the Work # Backend Development: Writing software for web servers, databases, and APIs that power web applications. The focus is on efficient code, scalability, and data management. ASIC Design: Crafting digital logic circuits at a hardware level. The focus shifts to performance, power consumption, and silicon area optimization. 2. Tools and Workflows # In backend development, tools like VS Code, Python, and SQL are staples, alongside frameworks like Django or Flask. In ASIC design, you’re working with Verilog or VHDL, and tools from Cadence, Synopsys, and Mentor Graphics for simulation and synthesis. 3. Feedback and Iteration # Backend systems can be quickly iterated on, with immediate feedback from server logs or user interactions. ASIC development involves extensive simulations, with long cycles before physical hardware validation. Lessons Learned Along the Way #1. The Power of Problem-Solving #Debugging backend systems taught me persistence and the value of dissecting complex problems into manageable parts. These skills became indispensable when I faced ASIC simulation logs and timing analysis.\n2. Modularity is Universal #Whether it’s designing scalable APIs or creating reusable blocks in ASIC design, modular thinking ensures easier troubleshooting and adaptability.\n3. The Role of Open Source #Open-source played a crucial role in my development journey. It gave me access to tools I couldn’t afford and allowed me to learn by exploring and contributing to other people’s code. This exposure to diverse coding styles and problem-solving approaches helped build a solid foundation for tackling hardware design challenges.\n4. The Importance of Education and Passion #As my fascination with technology grew, I delved deeper into electronics through formal education. Concepts like digital logic and microprocessor design laid the groundwork for transitioning from software to hardware.\nChallenges in Shifting to ASIC Design #1. New Tools and Paradigms #Moving from backend programming to hardware design felt like entering a new universe. The syntax of Verilog and the complexity of EDA tools required patience and practice.\n2. Abstract Thinking #In backend development, results are often tangible and immediate. ASIC design required a shift to working with abstract logic and envisioning how circuits would function physically.\n3. Steeper Learning Curves #The depth of knowledge required in ASIC design, from understanding transistor-level behavior to mastering verification methodologies, was initially overwhelming but immensely rewarding.\nHow I Bridged the Gap #1. Building on Familiar Skills #My backend experience with algorithms and debugging translated well to firmware programming and eventually ASIC logic design. Each step built on a foundation of analytical thinking and problem-solving.\n2. Leveraging Education #My formal studies in electronics engineering were instrumental. Courses in digital logic, microprocessors, and embedded systems connected my software background to the hardware domain.\n3. Open-Source Contributions #Engaging with open-source projects allowed me to experiment, learn, and even create my own tools. These projects not only honed my coding skills but also exposed me to collaborative workflows and debugging strategies that are just as valuable in ASIC design.\n4. Learning by Doing #Hands-on projects played a pivotal role. Working with FPGAs allowed me to experiment with hardware logic design before fully committing to ASIC development.\n5. Resources That Helped Me # Books: \u0026ldquo;Digital Design\u0026rdquo; by M. Morris Mano. Courses: Online classes in FPGA development and ASIC methodologies. Community: Open-source forums and repositories where I could both learn from and contribute to ongoing projects. Final Thoughts #For me, transitioning from backend development to ASIC design was more than a career shift; it was a journey fueled by curiosity, a love for solving problems, and the invaluable support of the open-source community. Each step—from middle school experiments with web servers to studying electronics engineering—built a bridge to where I am today. If you’re considering a similar path, my advice is simple: stay curious, embrace challenges, and never stop learning. Open source has proven that knowledge shared is knowledge multiplied, and every skill you acquire, no matter how small it seems, will eventually contribute to your growth as a versatile and innovative engineer.\n","date":null,"permalink":"/blog/my_journey/","section":"Blog","summary":"","title":""},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]